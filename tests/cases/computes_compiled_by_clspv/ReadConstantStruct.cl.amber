[comment]
Source code in OpenCL C:

#define OUT_OF_BOUNDS_VALUE (-1.0f)

int KernelX()
{
    return get_global_id(0);
}

struct Float10 {
    float   m0,
            m1,
            m2,
            m3,
            m4,
            m5,
            m6,
            m7,
            m8,
            m9;
};

// Lookup table for the function 2^x, defined on the domain [0,9]
__constant float kTwoPowX[10] =
{
    1.0f,
    2.0f,
    4.0f,
    8.0f,
    16.0f,
    32.0f,
    64.0f,
    128.0f,
    256.0f,
    512.0f
};

__constant struct Float10 kTwoPowX_struct = {
    1.0f,
    2.0f,
    4.0f,
    8.0f,
    16.0f,
    32.0f,
    64.0f,
    128.0f,
    256.0f,
    512.0f
};

inline float GetArrayValue(int index) {
    float result = OUT_OF_BOUNDS_VALUE;

    if (0 <= index && index < (sizeof(kTwoPowX) / sizeof(kTwoPowX[0]))) {
        result = kTwoPowX[index];
    }

    return result;
}

inline float GetStructValue(int index) {
    if (index < 0)
        return OUT_OF_BOUNDS_VALUE;

    // This ugly way to turn an index into a member reference is necessary both because of a problem
    // initializing constant arrays in some devices, and bugs comparing against zero in those same
    // devices.
    float result = kTwoPowX_struct.m0;
    if (index > 0) {
        result = kTwoPowX_struct.m1;
        --index;
    }
    if (index > 0) {
        result = kTwoPowX_struct.m2;
        --index;
    }
    if (index > 0) {
        result = kTwoPowX_struct.m3;
        --index;
    }
    if (index > 0) {
        result = kTwoPowX_struct.m4;
        --index;
    }
    if (index > 0) {
        result = kTwoPowX_struct.m5;
        --index;
    }
    if (index > 0) {
        result = kTwoPowX_struct.m6;
        --index;
    }
    if (index > 0) {
        result = kTwoPowX_struct.m7;
        --index;
    }
    if (index > 0) {
        result = kTwoPowX_struct.m8;
        --index;
    }
    if (index > 0) {
        result = kTwoPowX_struct.m9;
        --index;
    }
    if (index > 0) {
        return OUT_OF_BOUNDS_VALUE;
    }

    return result;
}

__kernel void ReadConstantArray(__global float* outDest, int inWidth)
{
    int index = KernelX();
    if (index < inWidth) {
        outDest[index] = GetArrayValue(index);
    }
}

__kernel void ReadConstantStruct(__global float* outDest, int inWidth)
{
    int index = KernelX();
    if (index < inWidth) {
        outDest[index] = GetStructValue(index);
    }
}


The following SPIR-V code was generated by CLSPV with -cl-opt-disable option.
GIT_COMMIT of clspv = abc935edb700707dc33196fb57f5e3d5b2a80ff8

[compute shader spirv]
; SPIR-V
; Version: 1.0
; Generator: Codeplay; 0
; Bound: 138
; Schema: 0
               OpCapability Shader
               OpCapability VariablePointers
               OpExtension "SPV_KHR_storage_buffer_storage_class"
               OpExtension "SPV_KHR_variable_pointers"
               OpMemoryModel Logical GLSL450
               OpEntryPoint GLCompute %118 "ReadConstantArray" %gl_GlobalInvocationID
               OpEntryPoint GLCompute %128 "ReadConstantStruct" %gl_GlobalInvocationID
               OpSource OpenCL_C 120
               OpDecorate %46 SpecId 0
               OpDecorate %47 SpecId 1
               OpDecorate %48 SpecId 2
               OpDecorate %_runtimearr_float ArrayStride 4
               OpMemberDecorate %_struct_3 0 Offset 0
               OpDecorate %_struct_3 Block
               OpMemberDecorate %_struct_6 0 Offset 0
               OpDecorate %_struct_6 Block
               OpDecorate %gl_GlobalInvocationID BuiltIn GlobalInvocationId
               OpDecorate %gl_WorkGroupSize BuiltIn WorkgroupSize
               OpDecorate %52 DescriptorSet 0
               OpDecorate %52 Binding 0
               OpDecorate %53 DescriptorSet 0
               OpDecorate %53 Binding 1
               OpDecorate %_arr_float_uint_10 ArrayStride 4
      %float = OpTypeFloat 32
%_runtimearr_float = OpTypeRuntimeArray %float
  %_struct_3 = OpTypeStruct %_runtimearr_float
%_ptr_StorageBuffer__struct_3 = OpTypePointer StorageBuffer %_struct_3
       %uint = OpTypeInt 32 0
  %_struct_6 = OpTypeStruct %uint
%_ptr_StorageBuffer__struct_6 = OpTypePointer StorageBuffer %_struct_6
       %void = OpTypeVoid
          %9 = OpTypeFunction %void
%_ptr_StorageBuffer_uint = OpTypePointer StorageBuffer %uint
       %bool = OpTypeBool
%_ptr_StorageBuffer_float = OpTypePointer StorageBuffer %float
         %13 = OpTypeFunction %uint
     %v3uint = OpTypeVector %uint 3
%_ptr_Input_v3uint = OpTypePointer Input %v3uint
%_ptr_Input_uint = OpTypePointer Input %uint
         %17 = OpTypeFunction %float %uint
    %uint_10 = OpConstant %uint 10
%_arr_float_uint_10 = OpTypeArray %float %uint_10
%_ptr_Private__arr_float_uint_10 = OpTypePointer Private %_arr_float_uint_10
%_ptr_Private_float = OpTypePointer Private %float
%_ptr_Private_v3uint = OpTypePointer Private %v3uint
     %uint_0 = OpConstant %uint 0
   %float_n1 = OpConstant %float -1
     %uint_1 = OpConstant %uint 1
     %uint_2 = OpConstant %uint 2
     %uint_3 = OpConstant %uint 3
     %uint_4 = OpConstant %uint 4
     %uint_5 = OpConstant %uint 5
     %uint_6 = OpConstant %uint 6
     %uint_7 = OpConstant %uint 7
     %uint_8 = OpConstant %uint 8
     %uint_9 = OpConstant %uint 9
  %float_512 = OpConstant %float 512
  %float_256 = OpConstant %float 256
  %float_128 = OpConstant %float 128
   %float_64 = OpConstant %float 64
   %float_32 = OpConstant %float 32
   %float_16 = OpConstant %float 16
    %float_8 = OpConstant %float 8
    %float_4 = OpConstant %float 4
    %float_2 = OpConstant %float 2
    %float_1 = OpConstant %float 1
         %44 = OpConstantComposite %_arr_float_uint_10 %float_1 %float_2 %float_4 %float_8 %float_16 %float_32 %float_64 %float_128 %float_256 %float_512
%gl_GlobalInvocationID = OpVariable %_ptr_Input_v3uint Input
         %46 = OpSpecConstant %uint 1
         %47 = OpSpecConstant %uint 1
         %48 = OpSpecConstant %uint 1
%gl_WorkGroupSize = OpSpecConstantComposite %v3uint %46 %47 %48
         %50 = OpVariable %_ptr_Private_v3uint Private %gl_WorkGroupSize
         %51 = OpVariable %_ptr_Private__arr_float_uint_10 Private %44
         %52 = OpVariable %_ptr_StorageBuffer__struct_3 StorageBuffer
         %53 = OpVariable %_ptr_StorageBuffer__struct_6 StorageBuffer
         %54 = OpFunction %uint Pure %13
         %55 = OpLabel
         %56 = OpAccessChain %_ptr_Input_uint %gl_GlobalInvocationID %uint_0
         %57 = OpLoad %uint %56
               OpReturnValue %57
               OpFunctionEnd
         %58 = OpFunction %float Pure %17
         %59 = OpFunctionParameter %uint
         %60 = OpLabel
         %61 = OpULessThan %bool %59 %uint_10
               OpSelectionMerge %65 None
               OpBranchConditional %61 %62 %65
         %62 = OpLabel
         %63 = OpAccessChain %_ptr_Private_float %51 %59
         %64 = OpLoad %float %63
               OpBranch %65
         %65 = OpLabel
         %66 = OpPhi %float %float_n1 %60 %64 %62
               OpReturnValue %66
               OpFunctionEnd
         %67 = OpFunction %float Pure %17
         %68 = OpFunctionParameter %uint
         %69 = OpLabel
         %70 = OpSLessThan %bool %68 %uint_0
         %71 = OpLogicalNot %bool %70
               OpSelectionMerge %72 None
               OpBranchConditional %71 %74 %72
         %72 = OpLabel
         %73 = OpPhi %float %float_n1 %69 %117 %116
               OpReturnValue %73
         %74 = OpLabel
         %75 = OpIEqual %bool %68 %uint_0
         %76 = OpLogicalNot %bool %75
               OpSelectionMerge %116 None
               OpBranchConditional %76 %77 %116
         %77 = OpLabel
         %78 = OpSGreaterThan %bool %68 %uint_1
               OpSelectionMerge %114 None
               OpBranchConditional %78 %79 %114
         %79 = OpLabel
         %80 = OpIEqual %bool %68 %uint_2
         %81 = OpLogicalNot %bool %80
               OpSelectionMerge %112 None
               OpBranchConditional %81 %82 %112
         %82 = OpLabel
         %83 = OpSGreaterThan %bool %68 %uint_3
               OpSelectionMerge %110 None
               OpBranchConditional %83 %84 %110
         %84 = OpLabel
         %85 = OpIEqual %bool %68 %uint_4
         %86 = OpLogicalNot %bool %85
               OpSelectionMerge %108 None
               OpBranchConditional %86 %87 %108
         %87 = OpLabel
         %88 = OpSGreaterThan %bool %68 %uint_5
               OpSelectionMerge %106 None
               OpBranchConditional %88 %89 %106
         %89 = OpLabel
         %90 = OpIEqual %bool %68 %uint_6
         %91 = OpLogicalNot %bool %90
               OpSelectionMerge %104 None
               OpBranchConditional %91 %92 %104
         %92 = OpLabel
         %93 = OpSGreaterThan %bool %68 %uint_7
               OpSelectionMerge %102 None
               OpBranchConditional %93 %94 %102
         %94 = OpLabel
         %95 = OpIEqual %bool %68 %uint_8
         %96 = OpLogicalNot %bool %95
               OpSelectionMerge %100 None
               OpBranchConditional %96 %97 %100
         %97 = OpLabel
         %98 = OpIEqual %bool %68 %uint_9
         %99 = OpSelect %float %98 %float_512 %float_n1
               OpBranch %100
        %100 = OpLabel
        %101 = OpPhi %float %99 %97 %float_256 %94
               OpBranch %102
        %102 = OpLabel
        %103 = OpPhi %float %101 %100 %float_128 %92
               OpBranch %104
        %104 = OpLabel
        %105 = OpPhi %float %103 %102 %float_64 %89
               OpBranch %106
        %106 = OpLabel
        %107 = OpPhi %float %105 %104 %float_32 %87
               OpBranch %108
        %108 = OpLabel
        %109 = OpPhi %float %107 %106 %float_16 %84
               OpBranch %110
        %110 = OpLabel
        %111 = OpPhi %float %109 %108 %float_8 %82
               OpBranch %112
        %112 = OpLabel
        %113 = OpPhi %float %111 %110 %float_4 %79
               OpBranch %114
        %114 = OpLabel
        %115 = OpPhi %float %113 %112 %float_2 %77
               OpBranch %116
        %116 = OpLabel
        %117 = OpPhi %float %115 %114 %float_1 %74
               OpBranch %72
               OpFunctionEnd
        %118 = OpFunction %void None %9
        %119 = OpLabel
        %120 = OpAccessChain %_ptr_StorageBuffer_uint %53 %uint_0
        %121 = OpLoad %uint %120
        %122 = OpFunctionCall %uint %54
        %123 = OpSLessThan %bool %122 %121
               OpSelectionMerge %127 None
               OpBranchConditional %123 %124 %127
        %124 = OpLabel
        %125 = OpFunctionCall %float %58 %122
        %126 = OpAccessChain %_ptr_StorageBuffer_float %52 %uint_0 %122
               OpStore %126 %125
               OpBranch %127
        %127 = OpLabel
               OpReturn
               OpFunctionEnd
        %128 = OpFunction %void None %9
        %129 = OpLabel
        %130 = OpAccessChain %_ptr_StorageBuffer_uint %53 %uint_0
        %131 = OpLoad %uint %130
        %132 = OpFunctionCall %uint %54
        %133 = OpSLessThan %bool %132 %131
               OpSelectionMerge %137 None
               OpBranchConditional %133 %134 %137
        %134 = OpLabel
        %135 = OpFunctionCall %float %67 %132
        %136 = OpAccessChain %_ptr_StorageBuffer_float %52 %uint_0 %132
               OpStore %136 %135
               OpBranch %137
        %137 = OpLabel
               OpReturn
               OpFunctionEnd

[require]
VK_KHR_storage_buffer_storage_class
VK_KHR_variable_pointers

[test]
ssbo 0 80
ssbo 1 subdata int 0 8

compute entrypoint ReadConstantStruct
compute 20 1 1

# probe ssbo [type] [bind] [offset] == [values ...]
probe ssbo float 0 0  == 1.0
probe ssbo float 0 4  == 2.0
probe ssbo float 0 8  == 4.0
probe ssbo float 0 12 == 8.0
probe ssbo float 0 16 == 16.0
probe ssbo float 0 20 == 32.0
probe ssbo float 0 24 == 64.0
probe ssbo float 0 28 == 128.0
probe ssbo float 0 32 == -1.0
probe ssbo float 0 36 == -1.0
probe ssbo float 0 40 == -1.0
probe ssbo float 0 44 == -1.0
probe ssbo float 0 48 == -1.0
probe ssbo float 0 52 == -1.0
probe ssbo float 0 56 == -1.0
probe ssbo float 0 60 == -1.0
probe ssbo float 0 64 == -1.0
probe ssbo float 0 68 == -1.0
probe ssbo float 0 72 == -1.0
probe ssbo float 0 76 == -1.0
