[comment]
Source code in OpenCL C:

struct S { int arr[5]; };

struct S bar(int n) {
  struct S s;
  if (n > 0) {
    s.arr[0] = n;
    s.arr[1] = n + 1;
    s.arr[2] = n + 2;
    s.arr[3] = n + 3;
    s.arr[4] = n + 4;
  }
  return s;
}
kernel void foo(global struct S *out, int n) {
  *out = bar(n);
}

The following SPIR-V code was generated by CLSPV with -cl-opt-disable option.
GIT_COMMIT of clspv = 145112789c63c5069d56a165bfbe480926e2b588

[compute shader spirv]
; SPIR-V
; Version: 1.0
; Generator: Codeplay; 0
; Bound: 62
; Schema: 0
               OpCapability Shader
               OpCapability VariablePointers
               OpExtension "SPV_KHR_storage_buffer_storage_class"
               OpExtension "SPV_KHR_variable_pointers"
               OpMemoryModel Logical GLSL450
               OpEntryPoint GLCompute %46 "foo"
               OpSource OpenCL_C 120
               OpDecorate %22 SpecId 0
               OpDecorate %23 SpecId 1
               OpDecorate %24 SpecId 2
               OpMemberDecorate %_struct_4 0 Offset 0
               OpDecorate %_runtimearr__struct_4 ArrayStride 20
               OpMemberDecorate %_struct_6 0 Offset 0
               OpDecorate %_struct_6 Block
               OpMemberDecorate %_struct_8 0 Offset 0
               OpDecorate %_struct_8 Block
               OpDecorate %gl_WorkGroupSize BuiltIn WorkgroupSize
               OpDecorate %27 DescriptorSet 0
               OpDecorate %27 Binding 0
               OpDecorate %28 DescriptorSet 0
               OpDecorate %28 Binding 1
               OpDecorate %_arr_uint_uint_5 ArrayStride 4
       %uint = OpTypeInt 32 0
     %uint_5 = OpConstant %uint 5
%_arr_uint_uint_5 = OpTypeArray %uint %uint_5
  %_struct_4 = OpTypeStruct %_arr_uint_uint_5
%_runtimearr__struct_4 = OpTypeRuntimeArray %_struct_4
  %_struct_6 = OpTypeStruct %_runtimearr__struct_4
%_ptr_StorageBuffer__struct_6 = OpTypePointer StorageBuffer %_struct_6
  %_struct_8 = OpTypeStruct %uint
%_ptr_StorageBuffer__struct_8 = OpTypePointer StorageBuffer %_struct_8
       %void = OpTypeVoid
         %11 = OpTypeFunction %void
%_ptr_StorageBuffer_uint = OpTypePointer StorageBuffer %uint
         %13 = OpTypeFunction %_struct_4 %uint
       %bool = OpTypeBool
     %v3uint = OpTypeVector %uint 3
%_ptr_Private_v3uint = OpTypePointer Private %v3uint
     %uint_0 = OpConstant %uint 0
     %uint_1 = OpConstant %uint 1
     %uint_2 = OpConstant %uint 2
     %uint_3 = OpConstant %uint 3
     %uint_4 = OpConstant %uint 4
         %22 = OpSpecConstant %uint 1
         %23 = OpSpecConstant %uint 1
         %24 = OpSpecConstant %uint 1
%gl_WorkGroupSize = OpSpecConstantComposite %v3uint %22 %23 %24
         %26 = OpVariable %_ptr_Private_v3uint Private %gl_WorkGroupSize
         %27 = OpVariable %_ptr_StorageBuffer__struct_6 StorageBuffer
         %28 = OpVariable %_ptr_StorageBuffer__struct_8 StorageBuffer
         %29 = OpFunction %_struct_4 Const %13
         %30 = OpFunctionParameter %uint
         %31 = OpLabel
         %32 = OpSGreaterThan %bool %30 %uint_0
               OpSelectionMerge %38 None
               OpBranchConditional %32 %33 %38
         %33 = OpLabel
         %34 = OpIAdd %uint %30 %uint_1
         %35 = OpIAdd %uint %30 %uint_2
         %36 = OpIAdd %uint %30 %uint_3
         %37 = OpIAdd %uint %30 %uint_4
               OpBranch %38
         %38 = OpLabel
         %43 = OpPhi %uint %uint_0 %31 %30 %33
         %42 = OpPhi %uint %uint_0 %31 %34 %33
         %41 = OpPhi %uint %uint_0 %31 %35 %33
         %40 = OpPhi %uint %uint_0 %31 %36 %33
         %39 = OpPhi %uint %uint_0 %31 %37 %33
         %44 = OpCompositeConstruct %_arr_uint_uint_5 %43 %42 %41 %40 %39
         %45 = OpCompositeConstruct %_struct_4 %44
               OpReturnValue %45
               OpFunctionEnd
         %46 = OpFunction %void None %11
         %47 = OpLabel
         %48 = OpAccessChain %_ptr_StorageBuffer_uint %28 %uint_0
         %49 = OpLoad %uint %48
         %50 = OpFunctionCall %_struct_4 %29 %49
         %51 = OpCompositeExtract %_arr_uint_uint_5 %50 0
         %52 = OpCompositeExtract %uint %51 0
         %53 = OpCompositeExtract %uint %51 1
         %54 = OpCompositeExtract %uint %51 2
         %55 = OpCompositeExtract %uint %51 3
         %56 = OpCompositeExtract %uint %51 4
         %57 = OpAccessChain %_ptr_StorageBuffer_uint %27 %uint_0 %uint_0 %uint_0 %uint_0
               OpStore %57 %52
         %58 = OpAccessChain %_ptr_StorageBuffer_uint %27 %uint_0 %uint_0 %uint_0 %uint_1
               OpStore %58 %53
         %59 = OpAccessChain %_ptr_StorageBuffer_uint %27 %uint_0 %uint_0 %uint_0 %uint_2
               OpStore %59 %54
         %60 = OpAccessChain %_ptr_StorageBuffer_uint %27 %uint_0 %uint_0 %uint_0 %uint_3
               OpStore %60 %55
         %61 = OpAccessChain %_ptr_StorageBuffer_uint %27 %uint_0 %uint_0 %uint_0 %uint_4
               OpStore %61 %56
               OpReturn
               OpFunctionEnd
[require]
VK_KHR_storage_buffer_storage_class
VK_KHR_variable_pointers

[test]
ssbo 0:0 20
ssbo 0:1 subdata int 0 10

compute entrypoint foo
compute 1 1 1

probe ssbo int 0:0 0 == 10
probe ssbo int 0:0 4 == 11
probe ssbo int 0:0 8 == 12
probe ssbo int 0:0 12 == 13
probe ssbo int 0:0 16 == 14
