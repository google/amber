#!amber
# Copyright 2019 The Amber Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

SHADER vertex vert_shader PASSTHROUGH

SHADER fragment frag_shader_red GLSL
#version 430
layout(location = 0) out uvec4 color_out;
void main() {
  color_out = uvec4(255, 0.0, 0.0, 255);
}
END

SHADER vertex vert_shader_tex GLSL
#version 430
layout(location = 0) in vec4 position;
layout(location = 1) in vec2 texcoords_in;
layout(location = 0) out vec2 texcoords_out;
void main() {
  gl_Position = position;
  texcoords_out = texcoords_in;
}
END

SHADER fragment frag_shader_tex GLSL
#version 430
layout(location = 0) in vec2 texcoords_in;
layout(location = 0) out vec4 color_out;
uniform layout(set=0, binding=0) utexture2D tex;
uniform layout(set=0, binding=1) sampler tex_sampler;
void main() {
  color_out = texture(usampler2D(tex, tex_sampler), texcoords_in);
}
END

BUFFER texture FORMAT R8G8B8A8_UINT
BUFFER framebuffer FORMAT B8G8R8A8_UNORM

# Define samplers for all integer border colors.
SAMPLER sampler_int_opaque_white \
  ADDRESS_MODE_U clamp_to_border \
  ADDRESS_MODE_V clamp_to_border \
  BORDER_COLOR int_opaque_white

SAMPLER sampler_int_opaque_black \
  ADDRESS_MODE_U clamp_to_border \
  ADDRESS_MODE_V clamp_to_border \
  BORDER_COLOR int_opaque_black

SAMPLER sampler_int_transparent_black \
  ADDRESS_MODE_U clamp_to_border \
  ADDRESS_MODE_V clamp_to_border \
  BORDER_COLOR int_transparent_black

BUFFER position DATA_TYPE vec2<float> DATA
-1.0 -1.0
 0.0 -1.0
 0.0  0.0
-1.0  0.0

 0.0 -1.0
 1.0 -1.0
 1.0  0.0
 0.0  0.0

-1.0  0.0
 0.0  0.0
 0.0  1.0
-1.0  1.0
END
BUFFER texcoords DATA_TYPE vec2<float> DATA
-1.0 -1.0
 2.0 -1.0
 2.0  2.0
-1.0  2.0

-1.0 -1.0
 2.0 -1.0
 2.0  2.0
-1.0  2.0

-1.0 -1.0
 2.0 -1.0
 2.0  2.0
-1.0  2.0
END

PIPELINE graphics pipeline_texgen
  ATTACH vert_shader
  ATTACH frag_shader_red
  FRAMEBUFFER_SIZE 256 256
  BIND BUFFER texture AS color LOCATION 0
END

PIPELINE graphics pipeline_int_opaque_white
  ATTACH vert_shader_tex
  ATTACH frag_shader_tex
  BIND BUFFER texture AS sampled_image DESCRIPTOR_SET 0 BINDING 0
  BIND SAMPLER sampler_int_opaque_white DESCRIPTOR_SET 0 BINDING 1
  VERTEX_DATA position LOCATION 0
  VERTEX_DATA texcoords LOCATION 1
  FRAMEBUFFER_SIZE 256 256
  BIND BUFFER framebuffer AS color LOCATION 0
END

DERIVE_PIPELINE pipeline_int_opaque_black FROM pipeline_int_opaque_white
  BIND SAMPLER sampler_int_opaque_black DESCRIPTOR_SET 0 BINDING 1
END

DERIVE_PIPELINE pipeline_int_transparent_black FROM pipeline_int_opaque_white
  BIND SAMPLER sampler_int_transparent_black DESCRIPTOR_SET 0 BINDING 1
END

# Generate texture: a rectangle at the lower right corner.
CLEAR_COLOR pipeline_texgen 0 0 255 255
CLEAR pipeline_texgen
RUN pipeline_texgen DRAW_RECT POS 128 128 SIZE 128 128

# Draw the texture with coordinates going beyond 0 and 1 to trigger border color.
RUN pipeline_int_opaque_white DRAW_ARRAY AS TRIANGLE_FAN START_IDX 0 COUNT 4
RUN pipeline_int_opaque_black DRAW_ARRAY AS TRIANGLE_FAN START_IDX 4 COUNT 4
RUN pipeline_int_transparent_black DRAW_ARRAY AS TRIANGLE_FAN START_IDX 8 COUNT 4

EXPECT framebuffer IDX 1 1 SIZE 1 1 EQ_RGBA 255 255 255 255
EXPECT framebuffer IDX 129 1 SIZE 1 1 EQ_RGBA 0 0 0 255
EXPECT framebuffer IDX 1 129 SIZE 1 1 EQ_RGBA 0 0 0 0
