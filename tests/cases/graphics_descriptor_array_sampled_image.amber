#!amber
# Copyright 2020 The Amber Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

SHADER vertex vert_shader PASSTHROUGH

SHADER fragment frag_shader_texgen GLSL
#version 430
layout(location = 0) out vec4 color_out0;
layout(location = 1) out vec4 color_out1;
void main() {
  color_out0 = vec4(1.0, 0.0, 0.0, 1.0);
  color_out1 = vec4(0.0, 1.0, 0.0, 1.0);
}
END

SHADER vertex vert_shader_tex GLSL
#version 430
layout(location = 0) in vec4 position;
layout(location = 1) in vec2 texcoords_in;
layout(location = 0) out vec2 texcoords_out;
void main() {
  gl_Position = position;
  texcoords_out = texcoords_in;
}
END

SHADER fragment frag_shader_tex GLSL
#version 430
layout(location = 0) in vec2 texcoords_in;
layout(location = 0) out vec4 color_out;
uniform layout(set=0, binding=0) texture2D tex_0[2];
uniform layout(set=0, binding=1) sampler tex_sampler;
uniform layout(set=0, binding=2) texture2D tex_1[2];
void main() {
  vec4 tex_0_color = texture(sampler2D(tex_0[0], tex_sampler), texcoords_in);
  color_out = tex_0_color;
  color_out += texture(sampler2D(tex_0[1], tex_sampler), texcoords_in);
  // tex_1[0] and tex_1[1] should be equal to tex_0[0].
  if (tex_0_color != texture(sampler2D(tex_1[0], tex_sampler), texcoords_in) ||
      tex_0_color != texture(sampler2D(tex_1[1], tex_sampler), texcoords_in)) {
      color_out = vec4(1.0);
  }
}
END

IMAGE texture0 FORMAT R8G8B8A8_UNORM DIM_2D WIDTH 256 HEIGHT 256
IMAGE texture1 FORMAT R8G8B8A8_UNORM DIM_2D WIDTH 256 HEIGHT 256
IMAGE framebuffer FORMAT B8G8R8A8_UNORM DIM_2D WIDTH 256 HEIGHT 256
SAMPLER sampler
BUFFER position DATA_TYPE vec2<float> DATA
-0.75 -0.75
 0.75 -0.75
 0.75  0.75
-0.75  0.75
END
BUFFER texcoords DATA_TYPE vec2<float> DATA
0.0 0.0
2.0 0.0
2.0 2.0
0.0 2.0
END

PIPELINE graphics pipeline_texgen
  ATTACH vert_shader
  ATTACH frag_shader_texgen
  BIND BUFFER texture0 AS color LOCATION 0
  BIND BUFFER texture1 AS color LOCATION 1
END

PIPELINE graphics pipeline
  ATTACH vert_shader_tex
  ATTACH frag_shader_tex
  BIND BUFFER_ARRAY texture0 texture1 AS sampled_image DESCRIPTOR_SET 0 BINDING 0
  BIND SAMPLER sampler DESCRIPTOR_SET 0 BINDING 1
  BIND BUFFER_ARRAY texture0 texture0 AS sampled_image DESCRIPTOR_SET 0 BINDING 2
  VERTEX_DATA position LOCATION 0
  VERTEX_DATA texcoords LOCATION 1
  BIND BUFFER framebuffer AS color LOCATION 0
END

# Generate a texture with a quad at the lower right corner.
CLEAR_COLOR pipeline_texgen 0 0 255 255
CLEAR pipeline_texgen
RUN pipeline_texgen DRAW_RECT POS 128 128 SIZE 128 128

# Draw the texture using a default sampler.
CLEAR_COLOR pipeline 0 255 0 255
CLEAR pipeline
RUN pipeline DRAW_ARRAY AS TRIANGLE_FAN START_IDX 0 COUNT 4

EXPECT framebuffer IDX 1 1 SIZE 1 1 EQ_RGBA 0 255 0 255
EXPECT framebuffer IDX 81 81 SIZE 1 1 EQ_RGBA 255 255 0 255
EXPECT framebuffer IDX 81 33 SIZE 1 1 EQ_RGBA 0 0 255 255
